from odoo import models, fields, api, _
from datetime import datetime, timedelta, date
from datetime import date, datetime
import xlwt
from io import BytesIO
import base64
from base64 import b64decode, b64encode
from xlwt import easyxf


class PurchaseOrderExcel(models.TransientModel):
    _name = 'purchase.order.excel'
    _description = 'Purchase Order Excel'

    start_date = fields.Datetime(string="Start Date")
    end_date = fields.Datetime(string="End Date")
    purchase_orders = fields.Many2many('purchase.order', string='Orders')
    order_type = fields.Selection([('completed', 'Completed'), ('pending', 'Pending')],
                                  string='Type')
    summary_file = fields.Binary('Purchase Report')
    file_name = fields.Char('File Name')
    report_printed = fields.Boolean('Report')
    user_id = fields.Many2one('res.users', 'User', default=lambda self: self.env.user)
    company_id = fields.Many2one('res.company', default=lambda self: self.env.company)

    def tick_ok(self):
        domain = [('create_date', '>=', self.start_date), ('create_date', '<=', self.end_date),
                  ('state', '=', 'purchase')]
        orders = self.env['purchase.order'].search(domain)

        data = []
        for val in orders:
            var = {
                'date': val.create_date,
                'po_num': val.name,
                'vendor_name': val.partner_id.name,
                'po_status': val.state,
                'grn_status': val.receipt_status,
                'po_total_val': val.amount_total,
                'delivery_sch': val.date_planned,
                'indent_no': val.quotation_no
            }
            data.append(var)
        address = str(
            self.company_id.street + self.company_id.street2 + ' ' + self.company_id.city + ' ' + self.company_id.state_id.name + '-' + self.company_id.zip)
        workbook = xlwt.Workbook()

        worksheet1 = workbook.add_sheet('Purchase Order Report')

        design_1 = easyxf('align: horiz center;')
        design_2 = easyxf('align: horiz left;')
        design_3 = easyxf('align: horiz right;')
        design_4 = easyxf('align: horiz right; pattern: pattern solid, fore_colour gray25;font: bold 1;')
        design_5 = easyxf('align: horiz center;font: bold 1;pattern: pattern solid, fore_colour gray25;')
        design_6 = easyxf('align: horiz left;font: bold 1;pattern: pattern solid, fore_colour gray25;')
        design_8 = easyxf('align: horiz left;font: bold 1;')
        heading_format = xlwt.easyxf(
            'font: bold 1;align: horiz center; borders: left thin, right thin, top thin, bottom thin;')

        rows = 0
        serial_no = 1

        worksheet1.set_panes_frozen(True)
        worksheet1.set_horz_split_pos(rows + 1)

        rows += 1
        worksheet1.write_merge(rows, rows, 0, 12, self.company_id.name, design_5)
        rows += 1
        worksheet1.write_merge(rows, rows, 0, 12, address, design_5)
        rows += 2
        worksheet1.write_merge(rows, rows, 0, 12, 'Purchase Order Report', design_5)
        rows += 2
        worksheet1.write_merge(rows, rows, 0, 3, 'Generated By:', design_8)
        worksheet1.write_merge(rows, rows, 4, 6, self.user_id.name, design_2)
        worksheet1.write_merge(rows, rows, 7, 9, 'Date:', design_8)
        worksheet1.write_merge(rows, rows, 10, 12, fields.Datetime.now().strftime('%d-%m-%Y'), design_2)
        rows += 1
        worksheet1.write_merge(rows, rows, 0, 3, 'Start Date:', design_8)
        worksheet1.write_merge(rows, rows, 4, 6, self.start_date.strftime('%d-%m-%Y'), design_2)
        worksheet1.write_merge(rows, rows, 7, 9, 'End Date:', design_8)
        worksheet1.write_merge(rows, rows, 10, 12, self.end_date.strftime('%d-%m-%Y'), design_2)

        rows += 2
        worksheet1.write_merge(rows, rows, 0, 0, 'Date', design_5)
        worksheet1.write_merge(rows, rows, 1, 2, 'P.O.No', design_5)
        worksheet1.write_merge(rows, rows, 3, 4, 'Vendor Name', design_5)
        worksheet1.write_merge(rows, rows, 5, 6, 'PO Status', design_5)
        worksheet1.write_merge(rows, rows, 7, 7, 'GRN Status', design_5)
        worksheet1.write_merge(rows, rows, 8, 9, 'PO Total Value', design_5)
        worksheet1.write_merge(rows, rows, 10, 11, 'Delivery Schedule', design_5)
        worksheet1.write_merge(rows, rows, 12, 12, 'Indent No', design_5)
        rows += 1
        cnt = 0
        for datas in data:
            if datas['date']:
                worksheet1.write(rows, cnt, datas['date'].strftime('%d-%m-%Y'), design_2)
            else:
                worksheet1.write(rows, cnt, '-', design_1)
            if datas['po_num']:
                worksheet1.write_merge(rows, rows, 1, 2, datas['po_num'], design_2)
            else:
                worksheet1.write_merge(rows, rows, 1, 2, '-', design_1)
            if datas['vendor_name']:
                worksheet1.write_merge(rows, rows, 3, 4, datas['vendor_name'], design_2)
            else:
                worksheet1.write_merge(rows, rows, 3, 4, '-', design_1)
            if datas['po_status']:
                worksheet1.write_merge(rows, rows, 5, 6, datas['po_status'], design_2)
            else:
                worksheet1.write_merge(rows, rows, 5, 6, '-', design_1)
            if datas['grn_status']:
                worksheet1.write(rows, cnt + 7, datas['grn_status'], design_2)
            else:
                worksheet1.write(rows, cnt + 7, '-', design_1)
            if datas['po_total_val']:
                worksheet1.write_merge(rows, rows, 8, 9, datas['po_total_val'], design_3)
            else:
                worksheet1.write_merge(rows, rows, 8, 8, '-', design_1)
            if datas['delivery_sch']:
                worksheet1.write_merge(rows, rows, 10, 11, datas['delivery_sch'].strftime('%d-%m-%Y'), design_1)
            else:
                worksheet1.write_merge(rows, rows, 10, 11, '-', design_1)
            if datas['indent_no']:
                worksheet1.write(rows, cnt + 12, datas['indent_no'], design_2)
            else:
                worksheet1.write(rows, cnt + 12, '-', design_1)
            rows += 1

        fp = BytesIO()
        o = workbook.save(fp)
        fp.read()
        excel_file = base64.b64encode(fp.getvalue())
        self.write(
            {'summary_file': excel_file,
             'file_name': 'Purchase Orders Report - [ %s ].xls' % self.start_date.strftime('%d/%m/%Y'),
             'report_printed': True})
        fp.close()
        return {
            'view_mode': 'form',
            'res_id': self.id,
            'res_model': 'purchase.order.excel',
            'view_type': 'form',
            'type': 'ir.actions.act_window',
            'context': self.env.context,
            'target': 'new',
        }
