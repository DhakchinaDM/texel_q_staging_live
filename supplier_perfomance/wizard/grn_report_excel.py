from odoo import models, fields, api, _
from datetime import datetime, timedelta, date
from datetime import date, datetime
import xlwt
from io import BytesIO
import base64
from base64 import b64decode, b64encode
from xlwt import easyxf


class GrnExcel(models.TransientModel):
    _name = 'grn.excel'
    _description = 'Pending Service PO Report Excel'

    start_date = fields.Date(string='Start Date')
    end_date = fields.Date(string='End Date')
    purchase_orders = fields.Many2many('purchase.order', string='Purchase Orders')
    order_type = fields.Selection([('completed', 'Completed'), ('pending', 'Pending')],
                                  string='Type', default='completed')
    summary_file = fields.Binary('Purchase Report')
    file_name = fields.Char('File Name')
    report_printed = fields.Boolean('Report')
    user_id = fields.Many2one('res.users', 'User', default=lambda self: self.env.user)
    company_id = fields.Many2one('res.company', default=lambda self: self.env.company)

    def tick_ok(self):
        po_name = [order.id for order in self.purchase_orders]
        if self.start_date and self.end_date and self.purchase_orders:
            orders = self.env['purchase.order'].search([
                ('create_date', '>=', self.start_date),
                ('create_date', '<=', self.end_date),
                ('id', 'in', po_name),
                ('state', 'in', ['purchase', 'done']),
                ('purchase_type', '=', 'goods')
            ])
        else:
            orders = self.env['stock.move'].search([
                ('create_date', '>=', self.start_date),
                ('create_date', '<=', self.end_date),
                ('state', 'in', ['assigned', 'done']),
            ])
        data_dict = []
        for pick in orders:
            entry = {
                'po_no': pick.picking_id.origin,
                'grn_ref': pick.picking_id.name,
                'grn_date': pick.picking_id.create_date,
                'supplier_invoice_and_date': f"{pick.supplier_reference} / {pick.inv_date.strftime('%d-%m-%Y')}" if pick.supplier_reference or pick.inv_date else '-',
                'supplier_name': pick.picking_id.partner_id.name,
                'part_no': pick.product_id.default_code or ' - ',
                'description': pick.purchase_line_id.name or ' - ',
                'received_qty': pick.quantity,
                'po_qty': pick.purchase_line_id.product_qty,
                'po_status': pick.purchase_line_id.status,
            }
            data_dict.append(entry)

        workbook = xlwt.Workbook()
        worksheet1 = workbook.add_sheet('GRN Report')
        worksheet1.col(0).width = 7000
        for i in range(1, 8):
            worksheet1.col(i).width = 6500
        design_center = easyxf('align: horiz center;')
        design_left = easyxf('align: horiz left;')
        design_header = easyxf(
            'align: horiz center; font: bold 1; pattern: pattern solid, fore_colour gray25;')
        design_5 = easyxf('font: bold 1; align: horiz center;')
        design_8 = easyxf('font: bold 1; align: horiz left;')
        design_2 = easyxf('align: horiz left;')
        design_po_group = easyxf(
            'font: bold 1; align: horiz center; pattern: pattern solid, fore_colour gray25;')
        rows = 0
        worksheet1.set_panes_frozen(True)
        worksheet1.set_horz_split_pos(rows + 1)
        address = str(
            self.company_id.street + self.company_id.street2 + ' ' + self.company_id.city + ' ' + self.company_id.state_id.name + '-' + self.company_id.zip)

        rows += 1
        worksheet1.write_merge(rows, rows, 0, 7, self.company_id.name, design_5)
        rows += 1
        worksheet1.write_merge(rows, rows, 0, 7, address, design_5)
        rows += 2
        worksheet1.write_merge(rows, rows, 0, 7, 'GRN Report', design_5)
        rows += 2
        worksheet1.write(rows, 1, 'Generated By:', design_8)
        worksheet1.write_merge(rows, rows, 2, 3, self.user_id.name, design_2)
        worksheet1.write(rows, 5, 'Generated On:', design_8)
        worksheet1.write(rows, 6, fields.Datetime.now().strftime('%d-%m-%Y'), design_2)
        rows += 1
        worksheet1.write(rows, 1, 'Start Date:', design_8)
        worksheet1.write_merge(rows, rows, 2, 3, self.start_date.strftime('%d-%m-%Y'), design_2)
        worksheet1.write(rows, 5, 'End Date:', design_8)
        worksheet1.write(rows, 6, self.end_date.strftime('%d-%m-%Y'), design_2)
        rows += 2

        worksheet1.write(rows, 0, 'PO No', design_header)
        worksheet1.write(rows, 1, 'GRN No', design_header)
        worksheet1.write(rows, 2, 'GRN Date', design_header)
        worksheet1.write(rows, 3, 'Supplier Invoice No & Date', design_header)
        worksheet1.write(rows, 4, 'Supplier Name', design_header)
        worksheet1.write(rows, 5, 'Part No', design_header)
        worksheet1.write(rows, 6, 'Description', design_header)
        worksheet1.write(rows, 7, 'Qty received', design_header)
        worksheet1.write(rows, 8, 'PO Qty', design_header)
        worksheet1.write(rows, 9, 'PO Status', design_header)
        rows += 2

        for entry in data_dict:
            worksheet1.write(rows, 0, entry['po_no'], design_left)
            worksheet1.write(rows, 1, entry['grn_ref'], design_left)
            worksheet1.write(rows, 2, entry['grn_date'].strftime('%d-%m-%Y') if entry['grn_date'] else '-',
                             design_left)
            worksheet1.write(rows, 3, entry['supplier_invoice_and_date'], design_left)
            worksheet1.write(rows, 4, entry['supplier_name'], design_left)
            worksheet1.write(rows, 5, entry['part_no'], design_left)
            worksheet1.write(rows, 6, entry['description'], design_left)
            worksheet1.write(rows, 7, entry['received_qty'], design_center)
            worksheet1.write(rows, 8, entry['po_qty'], design_center)
            if entry['po_status'] == 'confirm':
                worksheet1.write(rows, 9, "PO Close", design_center)
            else:
                worksheet1.write(rows, 9, "PO Open", design_center)

            rows += 1

        fp = BytesIO()
        workbook.save(fp)
        self.write({
            'summary_file': base64.b64encode(fp.getvalue()),
            'file_name': 'GRN Report - [ %s ].xls' % self.start_date.strftime('%d/%m/%Y'),
            'report_printed': True
        })
        fp.close()

        return {
            'view_mode': 'form',
            'name': 'GRN Report',
            'res_id': self.id,
            'res_model': 'grn.excel',
            'view_type': 'form',
            'type': 'ir.actions.act_window',
            'context': self.env.context,
            'target': 'new',
        }
