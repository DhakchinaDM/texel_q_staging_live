from odoo import models, fields, api, _
from datetime import datetime, timedelta, date
from datetime import date, datetime
import xlwt
from io import BytesIO
import base64
from base64 import b64decode, b64encode
from xlwt import easyxf


class PendingGrnExcel(models.TransientModel):
    _name = 'pending.grn.excel'
    _description = 'Pending Service PO Report Excel'

    start_date = fields.Date(string='Start Date')
    end_date = fields.Date(string='End Date')
    purchase_orders = fields.Many2many('purchase.order', string='Orders')
    order_type = fields.Selection([('completed', 'Completed'), ('pending', 'Pending')],
                                  string='Type', default='completed')
    summary_file = fields.Binary('Purchase Report')
    file_name = fields.Char('File Name')
    report_printed = fields.Boolean('Report')
    user_id = fields.Many2one('res.users', 'User', default=lambda self: self.env.user)
    company_id = fields.Many2one('res.company', default=lambda self: self.env.company)

    def tick_ok(self):
        domain = [('create_date', '>=', self.start_date), ('create_date', '<=', self.end_date),
                  ('status', 'in', ['draft', 'progress']), ('state', '=', 'purchase')]
        orders = self.env['purchase.order.line'].search(domain)
        data = []
        for val in orders:
            grn_refs = []
            grn_dates = []
            for move in val.move_ids:
                grn_refs.append(move.picking_id.name)
                if move.picking_id.date_done:
                    grn_dates.append(move.picking_id.date_done.strftime("%d-%m-%Y"))
            var = {
                'po_num': val.order_id.name,
                'grn_ref': ', '.join(grn_refs),
                'grn_date': ', '.join(grn_dates),
                'supplier_invoice_and_date': f"{val.supplier_reference} / {val.inv_date}" if val.supplier_reference or val.inv_date else '-',
                'supplier_name': val.partner_id.name,
                'part_no': val.product_id.default_code,
                'description': val.name,
                'product_qty': val.product_qty,
                'received_qty': val.qty_received,
                'balanced_delivery': val.balanced_delivery,
            }
            data.append(var)
        address = str(
            self.company_id.street + self.company_id.street2 + ' ' + self.company_id.city + ' ' + self.company_id.state_id.name + '-' + self.company_id.zip)
        workbook = xlwt.Workbook()

        worksheet1 = workbook.add_sheet('Pending GRN Report')
        for i in range(0, 3):
            worksheet1.col(i).width = 5000
        worksheet1.col(3).width = 6500
        worksheet1.col(4).width = 7000
        worksheet1.col(5).width = 5000
        worksheet1.col(6).width = 7000
        worksheet1.col(7).width = 5000
        worksheet1.col(8).width = 5000
        worksheet1.col(9).width = 5000
        design_1 = easyxf('align: horiz center;')
        design_2 = easyxf('align: horiz left;')
        design_3 = easyxf('align: horiz right;')
        design_4 = easyxf('align: horiz right; pattern: pattern solid, fore_colour gray25;font: bold 1;')
        design_5 = easyxf('align: horiz center;font: bold 1;pattern: pattern solid, fore_colour gray25;')
        design_6 = easyxf('align: horiz left;font: bold 1;pattern: pattern solid, fore_colour gray25;')
        design_8 = easyxf('align: horiz left;font: bold 1;')
        design_9 = easyxf('align: horiz right;')
        heading_format = xlwt.easyxf(
            'font: bold 1;align: horiz center; borders: left thin, right thin, top thin, bottom thin;')
        rows = 0
        serial_no = 1
        worksheet1.set_panes_frozen(True)
        worksheet1.set_horz_split_pos(rows + 1)
        rows += 1
        worksheet1.write_merge(rows, rows, 0, 9, self.company_id.name, design_5)
        rows += 1
        worksheet1.write_merge(rows, rows, 0, 9, address, design_5)
        rows += 2
        worksheet1.write_merge(rows, rows, 0, 9, 'Pending GRN Report', design_5)
        rows += 2
        worksheet1.write_merge(rows, rows, 0, 1, 'Generated By:', design_8)
        worksheet1.write_merge(rows, rows, 2, 3, self.user_id.name, design_2)
        worksheet1.write_merge(rows, rows, 5, 6, 'Date:', design_8)
        worksheet1.write_merge(rows, rows, 7, 9, fields.Datetime.now().strftime('%d-%m-%Y'), design_2)
        rows += 1
        worksheet1.write_merge(rows, rows, 0, 1, 'Start Date:', design_8)
        worksheet1.write_merge(rows, rows, 2, 3, self.start_date.strftime('%d-%m-%Y'), design_2)
        worksheet1.write_merge(rows, rows, 5, 6, 'End Date:', design_8)
        worksheet1.write_merge(rows, rows, 7, 9, self.end_date.strftime('%d-%m-%Y'), design_2)
        rows += 2
        worksheet1.write(rows, 0, 'Purchase Order No', design_5)
        worksheet1.write(rows, 1, 'GRN No', design_5)
        worksheet1.write(rows, 2, 'GRN Date', design_5)
        worksheet1.write(rows, 3, 'Supplier Invoice No & Date', design_5)
        worksheet1.write(rows, 4, 'Supplier Name', design_5)
        worksheet1.write(rows, 5, 'Part No', design_5)
        worksheet1.write(rows, 6, 'Description', design_5)
        worksheet1.write(rows, 7, 'PO Qty', design_5)
        worksheet1.write(rows, 8, 'Qty received', design_5)
        worksheet1.write(rows, 9, 'Pending Quantity', design_5)
        rows += 1
        cnt = 0
        serial_no = 1
        for datas in data:
            if datas['po_num']:
                worksheet1.write(rows, 0, datas['po_num'], design_2)
            else:
                worksheet1.write(rows, 0, '-', design_1)
            if datas['grn_ref']:
                worksheet1.write(rows, 1, datas['grn_ref'], design_2)
            else:
                worksheet1.write(rows, 1, '-', design_1)
            if datas['grn_date']:
                worksheet1.write(rows, 2, datas['grn_date'], design_2)
            else:
                worksheet1.write(rows, 2, '-', design_1)
            if datas['supplier_invoice_and_date'] != '-':
                worksheet1.write(rows, 3, datas['supplier_invoice_and_date'], design_2)
            else:
                worksheet1.write(rows, 3, '-', design_1)
            if datas['supplier_name']:
                worksheet1.write(rows, 4, datas['supplier_name'], design_2)
            else:
                worksheet1.write(rows, 4, '-', design_1)
            if datas['part_no']:
                worksheet1.write(rows, 5, datas['part_no'], design_2)
            else:
                worksheet1.write(rows, 5, '-', design_1)
            if datas['description']:
                worksheet1.write(rows, 6, datas['description'], design_2)
            else:
                worksheet1.write(rows, 6, '-', design_1)
            if datas['product_qty']:
                worksheet1.write(rows, 7, datas['product_qty'], design_9)
            else:
                worksheet1.write(rows, 7, '-', design_1)
            if datas['received_qty']:
                worksheet1.write(rows, 8, datas['received_qty'], design_9)
            else:
                worksheet1.write(rows, 8, '-', design_1)
            if datas['balanced_delivery']:
                worksheet1.write(rows, 9, datas['balanced_delivery'], design_9)
            else:
                worksheet1.write(rows, 9, '-', design_1)
            rows += 1

        fp = BytesIO()
        o = workbook.save(fp)
        fp.read()
        excel_file = base64.b64encode(fp.getvalue())
        self.write(
            {'summary_file': excel_file,
             'file_name': 'Pending GRN Report  - [ %s ].xls' % self.start_date.strftime('%d/%m/%Y'),
             'report_printed': True})
        fp.close()
        return {
            'view_mode': 'form',
            'name': 'Pending GRN Report',
            'res_id': self.id,
            'res_model': 'pending.grn.excel',
            'view_type': 'form',
            'type': 'ir.actions.act_window',
            'context': self.env.context,
            'target': 'new',
        }
